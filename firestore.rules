service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /feedback/{feedback} {
        allow create;
        allow read, update, delete: if isAdmin() || isEditor() || isTeacher();
    }

    match /events/{event} {
        allow read;
        allow write: if isAdmin() || isAuthor() || isEditor() || isTeacher();
    }

    match /news/{news} {
        allow read;
        allow write: if isAdmin()  || isAuthor() || isEditor() || isTeacher();
    }

    match /schedule/{schedule}  {
      allow read;
      allow write: if isAdmin()  || isAuthor() || isEditor() || isTeacher();
    }


    match /exams/{exam}  {
      allow read;
      allow write: if isAdmin()  || isAuthor() || isEditor() || isTeacher();
    }


    match /users/{userId} {
      allow get;
      allow list: if isAdmin() || isEditor()  || isTeacher();

      // Only privileged users can confirm and change roles of users
      allow update, create: if isAdmin() || isEditor()  || isTeacher() || (isOwner(userId) && !incomingDataHasFields(['confirmed', 'roles']))  ;
      allow delete: if isAdmin();
    }

    match /confirmed/{confirm}  {
      allow read;
      allow write: if isAdmin()  || isEditor() || isTeacher();
    }

    match /notifications/{userId} {
        allow read;
        allow write: if isOwner(userId);
    }

    match /programs/{document=**} {
        allow read;
        allow write: if isAdmin() || isEditor()  || isTeacher();
    }

    match /skills/{document=**} {
        allow read;
        allow write: if isAdmin() || isEditor()  || isTeacher();
    }


    match /groups/{groupId} {
        allow read;
        allow write: if isAdmin() || isEditor() || isTeacher();
    }


    // Functions //

  	function existingData() {
      return resource.data
    }

    function incomingData() {
      return resource.data
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }


    function isAuthor(userId) {
      return isSignedIn() && request.auth.uid == resource.data.authorId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data
    }

    function getUserRoles() {
      return getUserData().roles;
    }

    function isAdmin() {
      return getUserRoles().admin == true;
    }

    function isEditor() {
      return getUserRoles().editor == true;
    }

    function isTeacher() {
      return getUserRoles().teacher == true;
    }

    function isStudent() {
      return getUserRoles().student == true;
    }

    function incomingDataHasFields(fields) {
        return ((
            request.writeFields == null
            && request.resource.data.keys().hasAll(fields)
        ) || (
            request.writeFields != null
            && request.writeFields.hasAll(fields)
        ));
    }
  }
}
